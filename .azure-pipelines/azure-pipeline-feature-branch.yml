trigger:
  - features/*

pr:
  - features/*

variables:
  serviceName: 'feat-$(Build.SourceBranchName)'

pool:
  vmImage: ubuntu-latest

stages:
  - stage: CheckVariablesStage
    displayName: "Check Variables Stage"
    jobs:
    - job: CheckVariablesJob
      displayName: 'Check Variables Job'
        continueOnError: false
        steps:
        - script: |
           echo serviceName=${{ variables.serviceName }}
           echo environmentName=${{ variables.environmentName }}
           echo distArtifactName=${{ variables.distArtifactName }}
           echo terraformArtifactName=${{ variables.terraformArtifactName }}
        displayName: Checking variables

  - stage: 'BuildStage'
    displayName: "Build Stage"
    jobs:
    - job: AppBuildJob
      displayName: 'App Build Job'
      pool:
        vmImage: 'ubuntu-latest' 
      steps:
      - task: NodeTool@1
      inputs:
          version: '20.x'
      displayName: 'Install Node.js'
      - script: |
          npm install
      displayName: 'npm install'
      - script: |
          npm run build
      displayName: 'npm run build'
      - script: |
          npm run package
      displayName: 'npm run package'
      - script: |
          npm run test
      displayName: 'npm run test'
    - job: TerraformBuildJob
      displayName: "Terraform Build Job"
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: "Install Terraform 1.3.7"
      inputs:
        terraformVersion: 1.3.7
      - task: TerraformTaskV4@4
      displayName: "Initialize Terraform"
      inputs:
        provider: "aws"
        command: "init"
        backendServiceAWS: "FeaturePOCDevAWS"
        backendAWSBucketName: "feat-state-bucket-dev"
        backendAWSKey: "state/${{ variables.serviceName }}.tfstate"
        workingDirectory: '$(Build.SourcesDirectory)/terraform'
      - task: TerraformTaskV4@4
      displayName: 'Generate Terraform plan'
      inputs:
        provider: "aws"
        command: "plan"
        commandOptions: '-var="service=${{ variables.serviceName }}" -var-file="env/dev.tfvars"'
        environmentServiceNameAWS: "FeaturePOCDevAWS"
        workingDirectory: '$(Build.SourcesDirectory)/terraform'
    - job: ReviewTerraformPlanJob
      displayName: "Review Terraform Plan JOb"
      dependsOn: TerraformBuildJob
      condition: succeeded()
      timeoutInMinutes: 1440
      pool: server
      steps:
      - task: ManualValidation@0

  - stage: 'PublishStage'
    displayName: "Publish Stage"
    dependsOn: BuildStage
    condition: succeeded()
    jobs:
    - job: PublishJob
      displayName: 'Publish Job'
      - task: CopyFiles@2
      inputs:
        sourceFolder: '$(Build.SourcesDirectory)'
        contents: 'dist/**'
        targetFolder: '$(Build.ArtifactStagingDirectory)/dist'
      displayName: 'Copy dist files'
      - task: CopyFiles@2
      inputs:
        sourceFolder: '$(Build.SourcesDirectory)'
        contents: 'terraform/**'
        targetFolder: '$(Build.ArtifactStagingDirectory)/terraform'
      displayName: 'Copy terraform files'
      - task: PublishPipelineArtifact@1
      inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)'
          artifactName: "drop"
          publishLocation: 'pipeline'
      displayName: 'Publish project artifact'

  - stage: "DeployStage"
    displayName: "Deploy Stage"
    dependsOn: 
      - BuildStage
      - PublishStage
    condition: succeeded()
    jobs:
    - job: TerraformBuildJob
      displayName: "Terraform Build Job"
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: "Install Terraform 1.3.7"
      inputs:
        terraformVersion: 1.3.7

      - task: TerraformTaskV4@4
      displayName: "Initialize Terraform"
      inputs:
      provider: "aws"
      command: "init"
      backendServiceAWS: "FeaturePOCDevAWS"
      backendAWSBucketName: "feat-state-bucket-dev"
      backendAWSKey: "state/${{ variables.serviceName }}.tfstate"
      workingDirectory: '$(Pipeline.Workspace)/${{ variables.artefactName }}/terraform'
  